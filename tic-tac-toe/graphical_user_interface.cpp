//
// Created by ramon on 29-3-2020.
//

#include "graphical_user_interface.hpp"

/// Constructor of the class graphical_user_interface
/// \param a_window: Represents a reference of the window you wish to draw gui object on
graphical_user_interface::graphical_user_interface(sf::RenderWindow &a_window):
    window(a_window){};


/// This function checks the x and y coordinates via moves and
/// then stes the coordinates for the images
/// after this it draws a images on the corresponding coordinates
/// after drawing this images the images is displayed
/// \param moves: Represents a reference to a vector of valid game moves that are
///               generated by the game logic
void graphical_user_interface::draw_moves(std::vector<game_moves> &moves) {
    window.clear();
    board_builder boardBuilder(window);
    for(auto move : moves){
        if(move.get_move()[0] == 0){
            x_pos = 0.0;
        } else if(move.get_move()[0] == 1){
            x_pos = 225.0;
        } else{
            x_pos = 450.0;
        }
        if(move.get_move()[1] == 0){
            y_pos = 0.0;
        } else if(move.get_move()[1] == 1){
            y_pos = 225.0;
        } else{
            y_pos = 450.0;
        }
        if(sf::Mouse::isButtonPressed(sf::Mouse::Right)){
            draw_image(!move.get_player(), x_pos, y_pos);
        }
        draw_image(move.get_player(), x_pos, y_pos);

    }
    window.display();
}


/// This function will draw circle and x images for players
/// \param player: Represents a boolean value of 1 or 0 for either player 2 or player 1
/// \param pos_x: Represents the x value where the images will be drawn
/// \param pos_y: Represents the y value where the images will be drawn
void  graphical_user_interface::draw_image(bool player, float pos_x, float pos_y) {
    sf::Image image;
    sf::Texture texture;
    sf::Sprite sprite;
    if(player){
        if(!(image.loadFromFile("X.png"))){
            std::cout << "Error reading image!" << std::endl;
        }
        texture.loadFromImage(image);
        sprite.setTexture(texture);
    } else{
        if(!(image.loadFromFile("O.png"))){
            std::cout << "Error reading image!" << std::endl;
        }
        texture.loadFromImage(image);
        sprite.setTexture(texture);
    }
    sprite.setPosition(pos_x,pos_y);
    window.draw(sprite);
}


/// This function checks the game state and than serves
/// either a win images for player 1 or player 2 or a tie screen
/// \param game_state: Represents a game state which is generated by the game logic
void graphical_user_interface::end_game(float game_state) {
    window.clear();
    if(game_state == 0.5){
        draw_tie_image(220,220);
    } else if(game_state == 1){
        draw_image(bool(game_state),220,220);
    } else{
        draw_image(bool(game_state),220,220);
    }
    window.display();
}


/// This function gets the moves of the mouse and
/// determines were a move must be drawn
/// \param player: Represents a boolean value with either a 0 for player 1
/// or a 1 for player 2
/// \return game_moves object: Represents an object for a move with player
/// number and coordinates given
game_moves graphical_user_interface::get_move(bool player) {

    if(sf::Mouse::isButtonPressed(sf::Mouse::Right)){
            return game_moves(-2, -2, -2);
    } else if(sf::Mouse::isButtonPressed(sf::Mouse::Left)){
        int pos_x, pos_y;
        auto pos_mouse = sf::Mouse::getPosition(window);

        if(pos_mouse.x >= 450.0){
            pos_x = 2;
        } else if(pos_mouse.x >= 225.0){
            pos_x = 1;
        } else {
            pos_x = 0;
        }
        if(pos_mouse.y >= 450.0){
            pos_y = 2;
        } else if(pos_mouse.y >= 255.0){
            pos_y = 1;
        } else{
            pos_y = 0;
        }
        return game_moves(player, pos_x, pos_y);
    }
    return game_moves(-1,-1,-1);
}


/// This function will draw a game tie images
/// \param pos_x: The x position where the images wil be drawn
/// \param pos_y: The y position where the images wil be drawn
void graphical_user_interface::draw_tie_image(float pos_x, float pos_y) {
    sf::Image image;
    sf::Texture texture;
    sf::Sprite sprite;
    if(!image.loadFromFile("tie.png")){
        std::cout << "error loading from file!"<<std::endl;
    }
    texture.loadFromImage(image);
    sprite.setTexture(texture);
    sprite.setPosition(pos_x,pos_y);
    window.draw(sprite);
}
